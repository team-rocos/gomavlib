package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"

	libgen "github.com/team-rocos/gomavlib/commands/dialgen/libgen"
	"gopkg.in/alecthomas/kingpin.v2"
)

var tplDialect = template.Must(template.New("").Parse(
	`// Autogenerated with dialgen, do not edit.
{{- if .Preamble }}
//
// {{ .Preamble }}
//
{{- end }}
package {{ .PkgName }}

import (
	"github.com/team-rocos/gomavlib"
)

// Dialect contains the dialect object that can be passed to the library.
var Dialect = dialect

// dialect is not exposed directly such that it is not displayed in godoc.
var dialect = gomavlib.MustDialectCT({{.Version}}, []gomavlib.Message{
{{- range .Defs }}
    // {{ .Name }}
{{- range .Messages }}
    &Message{{ .Name }}{},
{{- end }}
{{- end }}
})

{{ range .Enums }}
// {{ .Description }}
type {{ .Name }} int

const (
{{- $pn := .Name }}
{{- range .Values }}
	// {{ .Description }}
	{{ .Name }} {{ $pn }} = {{ .Value }}
{{- end }}
)
{{ end }}

{{ range .Defs }}
// {{ .Name }}

{{ range .Messages }}
// {{ .Description }}
type Message{{ .Name }} struct {
{{- range .Fields }}
	// {{ .Description }}
    {{ .Line }}
{{- end }}
}

func (m *Message{{ .Name }}) GetId() uint32 {
    return {{ .Id }}
}

func (m *Message{{ .Name }}) SetField(field string, value interface{}) error {
	return gomavlib.SetMessageField(m, field, value)
}
{{ end }}
{{ end }}
`))

func main() {
	kingpin.CommandLine.Help = "Convert Mavlink dialects from XML format into Go format."

	preamble := kingpin.Flag("preamble", "preamble comment").String()
	mainDefAddr := kingpin.Arg("xml", "a path or url pointing to a XML Mavlink dialect").Required().String()

	// If common.xml is in a different file location to the main xml file specified, and it's included in the main xml file,
	// then the location to common.xml should be specified as a command line argument. If common.xml is included, and is in
	// the same location as the main xml file specified, then this additional argument is optional.
	commonAddr := kingpin.Arg("common.xml", "a path or url pointing to the common XML Mavlink dialect - common.xml").String()
	kingpin.Parse()

	outDefs, version := libgen.XMLToFields(*mainDefAddr, *commonAddr)
	err := generateGoCode(outDefs, version, *preamble, *mainDefAddr)
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERR: %s\n", err)
		os.Exit(1)
	}
}

func generateGoCode(outDefs []*libgen.OutDefinition, version string, preamble string, mainDefAddr string) error {

	// merge enums together
	enums := make(map[string]*libgen.OutEnum)
	for _, def := range outDefs {
		for _, defEnum := range def.Enums {
			if _, ok := enums[defEnum.Name]; !ok {
				enums[defEnum.Name] = &libgen.OutEnum{
					Name:        defEnum.Name,
					Description: defEnum.Description,
				}
			}
			enum := enums[defEnum.Name]

			for _, v := range defEnum.Values {
				enum.Values = append(enum.Values, v)
			}
		}
	}

	// fill enum missing values
	for _, enum := range enums {
		nextVal := 0
		for _, v := range enum.Values {
			if v.Value != "" {
				nextVal, _ = strconv.Atoi(v.Value)
				nextVal++
			} else {
				v.Value = strconv.Itoa(nextVal)
				nextVal++
			}
		}
	}

	// get package name
	// remove underscores since they can lead to errors
	// (for instance, when package name ends with _test)
	_, inFile := filepath.Split(mainDefAddr)
	pkgName := strings.TrimSuffix(inFile, ".xml")

	// dump
	return tplDialect.Execute(os.Stdout, map[string]interface{}{
		"PkgName":  pkgName,
		"Preamble": preamble,
		"Version": func() int {
			ret, _ := strconv.Atoi(version)
			return ret
		}(),
		"Defs":  outDefs,
		"Enums": enums,
	})
}
